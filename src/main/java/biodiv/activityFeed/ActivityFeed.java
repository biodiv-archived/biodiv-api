package biodiv.activityFeed;

import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;

import biodiv.common.MyJson;
import biodiv.common.MyJsonType;
import biodiv.user.User;

/**
 * ActivityFeed generated by hbm2java
 */

@org.hibernate.annotations.TypeDef(name = "MyJsonType", typeClass = MyJsonType.class)


@Entity
@Table(name = "activity_feed", schema = "public")
public class ActivityFeed implements java.io.Serializable {
	
	static final String COMMENT_ADDED = "Added a comment";
	static final String COMMENT_IN_REPLY_TO = "In reply to";
	
    //instance related
	static final String INSTANCE_CREATED = "Instance created";
	static final String INSTANCE_UPDATED = "Instance updated";
	static final String INSTANCE_DELETED = "Instance deleted";

	
	//checklist related
	static final String CHECKLIST_CREATED = "Checklist created";
	static final String CHECKLIST_UPDATED = "Checklist updated";
	//static final String CHECKLIST_POSTED_ON_GROUP = "Posted checklist to group"
	//static final String CHECKLIST_REMOVED_FROM_GROUP = "Removed checklist from group"
	
	
	//observation related
	static final String OBSERVATION_CREATED = "Observation created";
	static final String OBSERVATION_UPDATED = "Observation updated";
	static final String OBSERVATION_FLAGGED = "Flagged";
	static final String REMOVED_FLAG = "Flag removed";
	static final String OBSERVATION_FLAG_DELETED = "Flag deleted";
	static final String OBSERVATION_DELETED = "Deleted observation";
	
	static final String SPECIES_RECOMMENDED = "Suggested species name";
	static final String SPECIES_AGREED_ON = "Agreed on species name";
	static final String RECOMMENDATION_REMOVED = "Suggestion removed";
	//static final String OBSERVATION_POSTED_ON_GROUP = "Posted observation to group"
	//static final String OBSERVATION_REMOVED_FROM_GROUP = "Removed observation from group"
	
    //Feature Related
    static final String FEATURED = "Featured";
    static final String UNFEATURED = "UnFeatured";

	//group related
	static final String USERGROUP_CREATED = "Group created";
	static final String USERGROUP_UPDATED = "Group updated";
	static final String MEMBER_JOINED = "Joined group";
	static final String MEMBER_LEFT = "Left Group";
	static final String MEMBER_ROLE_UPDATED = "Role updated";
	static final String USER_REGISTERED = "Registered to portal";
	static final String RESOURCE_POSTED_ON_GROUP = "Posted resource";
	static final String RESOURCE_REMOVED_FROM_GROUP = "Removed resoruce";
	//static final String RESOURCE_BULK_POST = "Bulk posting"
	//static final String RESOURCE_BULK_REMOVE = "Bulk removal"
	
	
	//document related
	static final String DOCUMENT_CREATED = "Document created";
	static final String DOCUMENT_UPDATED = "Document updated";
	
	//document related
	static final String DISCUSSION_CREATED = "Discussion created";
	static final String DISCUSSION_UPDATED = "Discussion updated";

	//static final String DOCUMENT_POSTED_ON_GROUP = "Posted document to group"
	//static final String DOCUMENT_REMOVED_FROM_GROUP = "Removed document from group"
	//species related
	//static final String SPECIES_POSTED_ON_GROUP = "Posted species to group"
	//static final String SPECIES_REMOVED_FROM_GROUP = "Removed species from group"
	static final String SPECIES_CREATED = "Created species";
	static final String SPECIES_UPDATED = "Updated species gallery";  //updation mail on when media changes
	static final String SPECIES_FIELD_UPDATED = "Updated species field";
	static final String SPECIES_FIELD_CREATED = "Added species field";
	static final String SPECIES_FIELD_DELETED = "Deleted species field";
	static final String SPECIES_SYNONYM_CREATED = "Added synonym";
	static final String SPECIES_SYNONYM_UPDATED = "Updated synonym";
	static final String SPECIES_SYNONYM_DELETED = "Deleted synonym";
	static final String SPECIES_COMMONNAME_CREATED = "Added common name";
	static final String SPECIES_COMMONNAME_UPDATED = "Updated common name";
	static final String SPECIES_COMMONNAME_DELETED = "Deleted common name";
	static final String SPECIES_HIERARCHY_CREATED = "Added hierarchy";
	static final String SPECIES_HIERARCHY_UPDATED = "Updated hierarchy";
	static final String SPECIES_HIERARCHY_DELETED = "Deleted hierarchy";
	static final String CUSTOM_FIELD_EDITED = "Custom field edited";
	static final String OBSERVATION_TAG_UPDATED = "Observation tag updated";
	static final String DOCUMENT_TAG_UPDATED = "Document tag updated";
	static final String DISCUSSION_TAG_UPDATED = "Discussion tag updated";
	static final String OBSERVATION_SPECIES_GROUP_UPDATED = "Observation species group updated";
	
	static final String OLDER = "older";
	static final String NEWER = "newer";
	
	static final String READ_ONLY = "readOnly";
	static final String EDITABLE = "editable";
	
	static final String AUTO = "auto";
	static final String MANUAL= "manual";
	
	static final String LATEST_FIRST = "latestFirst";
	static final String OLDEST_FIRST = "oldestFirst";
	
	static final String GENERIC = "Generic";
	static final String SPECIFIC = "Specific";
	static final String SELECTED = "Selected";
	static final String GROUP_SPECIFIC = "GroupSpecific";
	static final String MY_FEEDS = "MyFeeds";
	static final String USER = "User";
	
	
	static final String ALL = "All";
	static final String OTHER = "other";
	
	//classes for non-db object this should not use as root holder object in any manner 
	//these should be used only for comment with proper root holder object(some domain class)
	static final String SPECIES_SYNONYMS = "species_Synonyms";
	static final String SPECIES_COMMON_NAMES = "species_Common Names";
	static final String SPECIES_MAPS = "species_Occurrence Records";
	static final String SPECIES_TAXON_RECORD_NAME = "species_Taxon Record Name";
	static final String TAXON_NAME_UPDATED = "Taxon name updated";
	static final String FACT_UPDATED = "Updated fact";
	static final String FACT_CREATED = "Added a fact";
	
	
	
	private long id;
	private long version;
	private User user;
	private String activityDescrption;
	private Long activityHolderId;
	private String activityHolderType;
	private String activityRootType;
	private String activityType;
	private Date dateCreated;
	private Date lastUpdated;
	private Long rootHolderId;
	private String rootHolderType;
	private Long subRootHolderId;
	private String subRootHolderType;
	private Boolean isShowable;
	private MyJson descriptionJson;
	
	public ActivityFeed() {
	}

	public ActivityFeed(long id, User user, Date dateCreated, Date lastUpdated) {
		this.id = id;
		this.user = user;
		this.dateCreated = dateCreated;
		this.lastUpdated = lastUpdated;
	}

	public ActivityFeed(User user, String activityDescrption, Long activityHolderId,
			String activityHolderType, String activityType, Date dateCreated, Date lastUpdated,
			Long rootHolderId, String rootHolderType, Long subRootHolderId, String subRootHolderType,MyJson descriptionJson,
			Boolean isShowable) {
		this.user = user;
		this.activityDescrption = activityDescrption;
		this.activityHolderId = activityHolderId;
		this.activityHolderType = activityHolderType;
		this.activityType = activityType;
		this.dateCreated = dateCreated;
		this.lastUpdated = lastUpdated;
		this.rootHolderId = rootHolderId;
		this.rootHolderType = rootHolderType;
		this.subRootHolderId = subRootHolderId;
		this.subRootHolderType = subRootHolderType;
		this.descriptionJson = descriptionJson;
		this.isShowable = isShowable;
	}

	@Id
	@GenericGenerator(
	        name = "hibernate_generator",
	        strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator",
	        parameters = {
	                @Parameter(name = "sequence_name", value = "hibernate_sequence"),
	                @Parameter(name = "increment_size", value = "1"),
                    @Parameter(name = "optimizer", value = "hilo")
	        }
	)
	@GeneratedValue(generator = "hibernate_generator")
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Version
	@Column(name = "version", nullable = false)
	public long getVersion() {
		return this.version;
	}

	public void setVersion(long version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "author_id", nullable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "activity_descrption", length = 2000)
	public String getActivityDescrption() {
		return this.activityDescrption;
	}

	public void setActivityDescrption(String activityDescrption) {
		this.activityDescrption = activityDescrption;
	}

	@Column(name = "activity_holder_id")
	public Long getActivityHolderId() {
		return this.activityHolderId;
	}

	public void setActivityHolderId(Long activityHolderId) {
		this.activityHolderId = activityHolderId;
	}

	@Column(name = "activity_holder_type")
	public String getActivityHolderType() {
		return this.activityHolderType;
	}

	public void setActivityHolderType(String activityHolderType) {
		this.activityHolderType = activityHolderType;
	}

	@Column(name = "activity_root_type")
	public String getActivityRootType() {
		return this.activityRootType;
	}

	public void setActivityRootType(String activityRootType) {
		this.activityRootType = activityRootType;
	}

	@Column(name = "activity_type")
	public String getActivityType() {
		return this.activityType;
	}

	public void setActivityType(String activityType) {
		this.activityType = activityType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_created", nullable = false, length = 29)
	public Date getDateCreated() {
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", nullable = false, length = 29)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "root_holder_id")
	public Long getRootHolderId() {
		return this.rootHolderId;
	}

	public void setRootHolderId(Long rootHolderId) {
		this.rootHolderId = rootHolderId;
	}

	@Column(name = "root_holder_type")
	public String getRootHolderType() {
		return this.rootHolderType;
	}

	public void setRootHolderType(String rootHolderType) {
		this.rootHolderType = rootHolderType;
	}

	@Column(name = "sub_root_holder_id")
	public Long getSubRootHolderId() {
		return this.subRootHolderId;
	}

	public void setSubRootHolderId(Long subRootHolderId) {
		this.subRootHolderId = subRootHolderId;
	}

	@Column(name = "sub_root_holder_type")
	public String getSubRootHolderType() {
		return this.subRootHolderType;
	}

	public void setSubRootHolderType(String subRootHolderType) {
		this.subRootHolderType = subRootHolderType;
	}

	@Column(name = "is_showable")
	public Boolean getIsShowable() {
		return this.isShowable;
	}

	public void setIsShowable(Boolean isShowable) {
		this.isShowable = isShowable;
	}
	
	@Column(name = "description_json")
	@Type(type = "MyJsonType")
	public MyJson getDescriptionJson() {
		return this.descriptionJson;
	}
	
	public void setDescriptionJson(MyJson descriptionJson) {
		this.descriptionJson = descriptionJson;
	}
	
	
	
	public static String getType(Object rootHolder) {
		
		String type = rootHolder.getClass().getSimpleName();
		
		switch(type){
		
		case "Observation":
			type = "species.participation.Observation";
			break;
		default:
			//
		}
		return type;
	}

	public static Map<String,Object> getQuery(long rhId, String rootHolderType, String activityType, String feedType,
			String feedCategory, String feedClass, String feedPermission, String feedOrder, long fhoId,
			String feedHomeObjectType, String refreshtype, String timeLine, long refTime, boolean isShowable, int max,
			boolean countQuery,Date olderTimeRef) {
		
		ActivityFeed _af = new ActivityFeed();
		String hql;
		System.out.println("lastUpdatedfffffffffffffffffffffffffff "+olderTimeRef);
		Timestamp refTym = new java.sql.Timestamp(refTime);
		System.out.println("reftym "+refTym);
		if(countQuery){
			refTym = (Timestamp) olderTimeRef;
		}
		
		String selectClause;
		String fromClause = "from ActivityFeed af inner join User usr on af.user.id = usr.id";	
		String whereClause = "where";	
		String orderClause = "order by af.lastUpdated desc";
		if(isShowable){
			if(whereClause == "where"){
				whereClause += " af.isShowable =:isShowable";
			}else{
				whereClause += " and af.isShowable =:isShowable";
			}	
			_af.setIsShowable(isShowable);
		}
		
		if(feedCategory !=null && (feedCategory != "all")){
			if(whereClause == "where"){
				whereClause += " af.rootHolderType =:rootHolderType";
			}else{
				whereClause += " and af.rootHolderType =:rootHolderType";
			}
			_af.setRootHolderType(rootHolderType);
		}
		
		if(feedClass !=null){
			if(whereClause == "where"){
				whereClause += " af.activityType = :activitytype";
			}else{
				whereClause += " and af.activityType = :activitytype";
			}
			_af.setActivityType(activityType);
		}
		
		if(timeLine.equalsIgnoreCase("older")){
			
			if(whereClause == "where"){
				whereClause += " af.lastUpdated < :lastUpdated";
			}else{
				whereClause += " and af.lastUpdated < :lastUpdated";
			}
			//Timestamp refTime = new java.sql.Timestamp(refTym);
			_af.setLastUpdated(refTym);
		}else{
			System.out.println("olderrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
			if(whereClause == "where"){
				whereClause += " af.lastUpdated > :lastUpdated";
			}else{
				whereClause += " and af.lastUpdated > :lastUpdated";
			}
			//Timestamp refTime = new java.sql.Timestamp(refTym);
			_af.setLastUpdated(refTym);
		}
		
		switch(feedType){
		
		case "generic":
			if(whereClause == "where"){
				whereClause += " af.rootHolderType = :rootHolderType";
			}else{
				whereClause += " and af.rootHolderType = :rootHolderType";
			}
			_af.setRootHolderType(rootHolderType);
			break;
			
		case "specific":
			if(whereClause == "where"){
				whereClause += " af.rootHolderType = :rootHolderType";
				whereClause += " and af.rootHolderId = :rootHolderId";
			}else{
				whereClause += " and af.rootHolderType = :rootHolderType";
				whereClause += " and af.rootHolderId = :rootHolderId";
			}		
			_af.setRootHolderType(rootHolderType);
			_af.setRootHolderId(rhId);
			break;
			
		case "user":
		case "groupSpecific":
		case "myFeeds":
			if(feedType == "user"){
				
			}
			break;
			
		default:
			break;
			
		}
		
		if(!countQuery){
		  selectClause = "select usr.id,usr.name,usr.icon,af.id,af.version,af.activityHolderId,af.activityHolderType"
					+ ",af.activityDescrption,af.activityRootType,af.activityType,af.dateCreated,af.lastUpdated,af.rootHolderId"
					+ ",af.rootHolderType,af.subRootHolderId,af.subRootHolderType,af.isShowable,af.descriptionJson";
		  hql = selectClause+" "+fromClause+" " + whereClause+" "+ orderClause;
		}else{
			selectClause = "select count(*)";
			hql = selectClause+" "+fromClause+" " + whereClause;
		}
		Map<String, Object> queryAndAfObject = new HashMap<String, Object>();
		queryAndAfObject.put("query", hql);
		queryAndAfObject.put("afObject", _af);
		return queryAndAfObject;
	}

}
