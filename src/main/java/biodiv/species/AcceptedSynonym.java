package biodiv.species;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import biodiv.taxon.datamodel.dao.Taxon;

/**
 * AcceptedSynonym generated by hbm2java
 */
@Entity
@Table(name = "accepted_synonym", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = { "synonym_id",
		"accepted_id" }))
public class AcceptedSynonym implements java.io.Serializable {

	private long id;
	private long version;
	private Taxon taxonomyDefinitionBySynonymId;
	private Taxon taxonomyDefinitionByAcceptedId;

	public AcceptedSynonym() {
	}

	public AcceptedSynonym(long id, Taxon taxonomyDefinitionBySynonymId,
			Taxon taxonomyDefinitionByAcceptedId) {
		this.id = id;
		this.taxonomyDefinitionBySynonymId = taxonomyDefinitionBySynonymId;
		this.taxonomyDefinitionByAcceptedId = taxonomyDefinitionByAcceptedId;
	}

	@Id
	@GenericGenerator(
	        name = "hibernate_generator",
	        strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator",
	        parameters = {
	                @Parameter(name = "sequence_name", value = "hibernate_sequence"),
	                @Parameter(name = "increment_size", value = "1"),
                    @Parameter(name = "optimizer", value = "hilo")
	        }
	)
	@GeneratedValue(generator = "hibernate_generator")
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Version
	@Column(name = "version", nullable = false)
	public long getVersion() {
		return this.version;
	}

	public void setVersion(long version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "synonym_id", nullable = false)
	public Taxon getTaxonomyDefinitionBySynonymId() {
		return this.taxonomyDefinitionBySynonymId;
	}

	public void setTaxonomyDefinitionBySynonymId(Taxon taxonomyDefinitionBySynonymId) {
		this.taxonomyDefinitionBySynonymId = taxonomyDefinitionBySynonymId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "accepted_id", nullable = false)
	public Taxon getTaxonomyDefinitionByAcceptedId() {
		return this.taxonomyDefinitionByAcceptedId;
	}

	public void setTaxonomyDefinitionByAcceptedId(Taxon taxonomyDefinitionByAcceptedId) {
		this.taxonomyDefinitionByAcceptedId = taxonomyDefinitionByAcceptedId;
	}

}