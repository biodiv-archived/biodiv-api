package biodiv.user;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
* Role generated by hbm2java
*/
@Entity
@Table(name = "role", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "authority"))
@Cache(region="species.auth.Role",usage = CacheConcurrencyStrategy.READ_ONLY,include="non-lazy")
public class Role implements java.io.Serializable {

	private long id;
	private String authority;
	private Set<User> users = new HashSet(0);

	public Role() {
	}

	public Role(long id, String authority) {
		this.id = id;
		this.authority = authority;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Column(name = "authority", unique = true, nullable = false)
	public String getAuthority() {
		return this.authority;
	}

	public void setAuthority(String authority) {
		this.authority = authority;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "suser_role", schema = "public", joinColumns = {
			@JoinColumn(name = "role_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "s_user_id", nullable = false, updatable = false) })
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}
	
	@Override
	public String toString() {
		return "Role [id=" + id + ", authority=" + authority + "]";
	}

}
