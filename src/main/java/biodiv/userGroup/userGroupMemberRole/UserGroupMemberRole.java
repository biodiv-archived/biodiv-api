package biodiv.userGroup.userGroupMemberRole;
// Generated 31 Jul, 2017 7:18:53 AM by Hibernate Tools 3.5.0.Final

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.SessionFactory;

import com.google.inject.Inject;
import com.google.inject.assistedinject.AssistedInject;

import biodiv.common.AbstractObject;
import biodiv.common.Metadata.LocationScale;
import biodiv.user.Role;
import biodiv.user.User;
import biodiv.userGroup.UserGroup;

/**
 * UserGroupMemberRole generated by hbm2java
 */
@Entity
@Table(name = "user_group_member_role", schema = "public")
public class UserGroupMemberRole  extends AbstractObject implements java.io.Serializable {
	
	public enum UserGroupMemberRoleType {
		ROLE_USERGROUP_FOUNDER("ROLE_USERGROUP_FOUNDER"),
        ROLE_USERGROUP_EXPERT("ROLE_USERGROUP_EXPERT"),
        ROLE_USERGROUP_MEMBER("ROLE_USERGROUP_MEMBER");

		private String value;

		UserGroupMemberRoleType(String value) {
			this.value = value;
		}

		public String value() {
			return this.value;
		}
		
		static UserGroupMemberRoleType getEnum(String value){
			if(value ==null || value.isEmpty()) return null;

			value = value.toUpperCase().trim();

			switch(value){
				case "ROLE_USERGROUP_FOUNDER":
					return UserGroupMemberRoleType.ROLE_USERGROUP_FOUNDER;
				case "ROLE_USERGROUP_EXPERT":
					return UserGroupMemberRoleType.ROLE_USERGROUP_EXPERT;
				case "ROLE_USERGROUP_MEMBER":
					return UserGroupMemberRoleType.ROLE_USERGROUP_MEMBER;
				default:
					return null;
			}
		}
	}
	
	private UserGroupMemberRoleId id;
	private User user;
	private UserGroup userGroup;
	private Role role;

	public UserGroupMemberRole() {
	}
 
	public UserGroupMemberRole(UserGroup userGroup, User user, Role role) {
		this.id = new UserGroupMemberRoleId(userGroup.getId(), role.getId(), user.getId());
		this.user = user;
		this.userGroup = userGroup;
		this.role = role;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "userGroupId", column = @Column(name = "user_group_id", nullable = false)),
			@AttributeOverride(name = "roleId", column = @Column(name = "role_id", nullable = false)),
			@AttributeOverride(name = "userId", column = @Column(name = "s_user_id", nullable = false)) })
	public UserGroupMemberRoleId getId() {
		return this.id;
	}

	public void setId(UserGroupMemberRoleId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "s_user_id", nullable = false, insertable = false, updatable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_group_id", nullable = false, insertable = false, updatable = false)
	public UserGroup getUserGroup() {
		return this.userGroup;
	}

	public void setUserGroup(UserGroup userGroup) {
		this.userGroup = userGroup;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id", nullable = false, insertable = false, updatable = false)
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

}
